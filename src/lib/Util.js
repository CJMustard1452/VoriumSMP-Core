"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.broadcast = exports.intersects = exports.inBetween = void 0;
const launcher_1 = require("bdsx/launcher");
function inBetween(vector, tuple) {
    const [start, end] = tuple;
    const minX = Math.min(start.x, end.x);
    const maxX = Math.max(start.x, end.x);
    const minZ = Math.min(start.z, end.z);
    const maxZ = Math.max(start.z, end.z);
    return (vector.x >= minX &&
        vector.x <= maxX &&
        vector.z >= minZ &&
        vector.z <= maxZ);
}
exports.inBetween = inBetween;
function intersects(tuple1, tuple2) {
    const [start1, end1] = tuple1;
    const [start2, end2] = tuple2;
    // Find the minimum and maximum x and z values for each tuple
    const minX1 = Math.min(start1.x, end1.x);
    const maxX1 = Math.max(start1.x, end1.x);
    const minZ1 = Math.min(start1.z, end1.z);
    const maxZ1 = Math.max(start1.z, end1.z);
    const minX2 = Math.min(start2.x, end2.x);
    const maxX2 = Math.max(start2.x, end2.x);
    const minZ2 = Math.min(start2.z, end2.z);
    const maxZ2 = Math.max(start2.z, end2.z);
    // Check if the x and z ranges of the two tuples intersect
    const xOverlap = (minX1 <= maxX2) && (maxX1 >= minX2);
    const zOverlap = (minZ1 <= maxZ2) && (maxZ1 >= minZ2);
    return xOverlap && zOverlap;
}
exports.intersects = intersects;
function broadcast(msg) {
    launcher_1.bedrockServer.serverInstance.getPlayers().forEach(p => p.sendMessage(msg));
}
exports.broadcast = broadcast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNENBQThDO0FBRTlDLFNBQWdCLFNBQVMsQ0FBQyxNQUFnQixFQUFFLEtBQTJCO0lBQ25FLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzNCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEMsT0FBTyxDQUNMLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSTtRQUNoQixNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUk7UUFDaEIsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJO1FBQ2hCLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUNqQixDQUFDO0FBQ04sQ0FBQztBQWJELDhCQWFDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE1BQTRCLEVBQUUsTUFBNEI7SUFDakYsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDOUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7SUFFOUIsNkRBQTZEO0lBQzdELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV6QywwREFBMEQ7SUFDMUQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLENBQUM7SUFDdEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLENBQUM7SUFFdEQsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDO0FBQ2hDLENBQUM7QUFuQkQsZ0NBbUJDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEdBQVc7SUFDakMsd0JBQWEsQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFGRCw4QkFFQyJ9